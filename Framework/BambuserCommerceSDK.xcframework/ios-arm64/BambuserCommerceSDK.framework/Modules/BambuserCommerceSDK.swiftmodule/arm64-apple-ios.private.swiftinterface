// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.1.2 effective-5.10 (swiftlang-6.1.2.1.2 clang-1700.0.13.5)
// swift-module-flags: -target arm64-apple-ios15.6 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-experimental-feature DebugDescriptionMacro -enable-bare-slash-regex -module-name BambuserCommerceSDK
// swift-module-flags-ignorable: -no-verify-emitted-module-interface -interface-compiler-version 6.1.2
import AVKit

import Combine
import Foundation
import Swift
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public struct BambuserEventPayload {
  public let type: Swift.String
  public let data: [Swift.String : any Swift.Sendable]
}
public enum InlineVideoAsset : Swift.Sendable, Swift.Equatable, BambuserCommerceSDK.BambuserVideoType {
  case playlist(BambuserCommerceSDK.BambuserShoppableVideoPlaylistInfo)
  case sku(BambuserCommerceSDK.BambuserShoppableVideoSkuInfo)
  case videoId(Swift.String)
  public static func == (a: BambuserCommerceSDK.InlineVideoAsset, b: BambuserCommerceSDK.InlineVideoAsset) -> Swift.Bool
}
public typealias BambuserShoppableVideoAsset = BambuserCommerceSDK.InlineVideoAsset
public typealias BambuserShoppableVideoConfiguration = BambuserCommerceSDK.BambuserVideoPlayerConfiguration<BambuserCommerceSDK.BambuserShoppableVideoAsset>
@_Concurrency.MainActor public protocol BambuserPictureInPictureDelegate : AnyObject {
  @_Concurrency.MainActor func onPictureInPictureStateChanged(_ id: Swift.String, state: BambuserCommerceSDK.PlayerPipState)
}
public struct BambuserPlayerCollection {
  public let players: [any BambuserCommerceSDK.BambuserPlayerView]
  public let pagination: BambuserCommerceSDK.Pagination
}
public enum BambuserPlayerError : Swift.Error, Foundation.LocalizedError {
  case invalidTypeForUniqueShoppableVideo
  case invalidTypeForShoppableVideoList
  case videoNotFound
  public var errorDescription: Swift.String {
    get
  }
  public static func == (a: BambuserCommerceSDK.BambuserPlayerError, b: BambuserCommerceSDK.BambuserPlayerError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_Concurrency.MainActor public protocol BambuserPlayerView : UIKit.UIView {
  @_Concurrency.MainActor var delegate: (any BambuserCommerceSDK.BambuserVideoPlayerDelegate)? { get set }
  @_Concurrency.MainActor var id: Swift.String { get }
  @_Concurrency.MainActor var currentPlayerState: BambuserCommerceSDK.BambuserVideoState { get }
  @_Concurrency.MainActor var pipController: (any BambuserCommerceSDK.PictureInPictureController)? { get set }
  @_Concurrency.MainActor func cleanup()
  @discardableResult
  @_Concurrency.MainActor func invoke(function: Swift.String, arguments: Swift.String) async throws -> Any?
  @_Concurrency.MainActor func notify(callbackKey: Swift.String, info: Any)
  @_Concurrency.MainActor func track(event: Swift.String, with data: [Swift.String : any Swift.Sendable]) async throws -> [Swift.String : any Swift.Sendable]?
  @_Concurrency.MainActor func play()
  @_Concurrency.MainActor func pause()
  @_Concurrency.MainActor var currentPlayerMode: BambuserCommerceSDK.InlinePlayerMode { get }
  @_Concurrency.MainActor func changeMode(to mode: BambuserCommerceSDK.InlinePlayerMode) async throws
  @_Concurrency.MainActor func preload()
}
public enum BambuserVideoAsset : Swift.Sendable, Swift.Equatable, BambuserCommerceSDK.BambuserVideoType {
  case live(id: Swift.String)
  case onDemand(id: Swift.String)
  public static func == (a: BambuserCommerceSDK.BambuserVideoAsset, b: BambuserCommerceSDK.BambuserVideoAsset) -> Swift.Bool
}
public typealias BambuserVideoConfiguration = BambuserCommerceSDK.BambuserVideoPlayerConfiguration<BambuserCommerceSDK.BambuserVideoAsset>
@_Concurrency.MainActor public struct BambuserVideoPlayer {
  @_Concurrency.MainActor public init(server: BambuserCommerceSDK.OrganizationServer)
  @_Concurrency.MainActor public func createPlayerView(videoConfiguration: BambuserCommerceSDK.BambuserVideoConfiguration, ignoredSafeAreaEdges: BambuserCommerceSDK.SafeAreaEdges? = nil) -> some UIKit.UIView & BambuserCommerceSDK.BambuserPlayerView
  
  @_Concurrency.MainActor public func createShoppableVideoPlayer(videoConfiguration: BambuserCommerceSDK.BambuserShoppableVideoConfiguration) async throws -> some UIKit.UIView & BambuserCommerceSDK.BambuserPlayerView
  
  @_Concurrency.MainActor public func createShoppableVideoPlayerCollection(videoConfiguration: BambuserCommerceSDK.BambuserShoppableVideoConfiguration, page: Swift.Int = 1, pageSize: Swift.Int = 15) async throws -> BambuserCommerceSDK.BambuserPlayerCollection
}
public struct BambuserVideoPlayerConfiguration<VideoType> : @unchecked Swift.Sendable where VideoType : BambuserCommerceSDK.BambuserVideoType {
  public init(type: VideoType, events: [Swift.String] = ["*"], configuration: [Swift.String : any Swift.Sendable]?)
}
@_Concurrency.MainActor public protocol BambuserVideoPlayerDelegate : AnyObject {
  @_Concurrency.MainActor func onVideoStatusChanged(_ id: Swift.String, state: BambuserCommerceSDK.BambuserVideoState)
  @_Concurrency.MainActor func onNewEventReceived(_ id: Swift.String, event: BambuserCommerceSDK.BambuserEventPayload)
  @_Concurrency.MainActor func onErrorOccurred(_ id: Swift.String, error: any Swift.Error)
  @_Concurrency.MainActor func onVideoProgress(_ id: Swift.String, duration: Swift.Double, currentTime: Swift.Double)
}
extension BambuserCommerceSDK.BambuserVideoPlayerDelegate {
  @_Concurrency.MainActor public func onVideoProgress(_ id: Swift.String, duration: Swift.Double, currentTime: Swift.Double)
}
public enum BambuserVideoState {
  case ready
  case loading
  case playing
  case paused
  case ended
  case stopped
  case error
  case idle
  case buffering
  public static func == (a: BambuserCommerceSDK.BambuserVideoState, b: BambuserCommerceSDK.BambuserVideoState) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol BambuserVideoType : Swift.Sendable {
}
public struct Pagination : Swift.Codable {
  public let totalPages: Swift.Int?
  public let pageSize: Swift.Int, total: Swift.Int, page: Swift.Int
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
final public class DynamicFontSizeService {
  public init(baseSize: CoreFoundation.CGFloat)
  final public var fontSizePublisher: Combine.AnyPublisher<CoreFoundation.CGFloat, Swift.Never>? {
    get
  }
  final public var currentFontSize: CoreFoundation.CGFloat {
    get
  }
  @objc deinit
}
public enum InlinePlayerMode : Swift.Equatable {
  case preview
  case fullExperience
  public static func == (a: BambuserCommerceSDK.InlinePlayerMode, b: BambuserCommerceSDK.InlinePlayerMode) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct InlineVideoPlaylistInfo : Swift.Sendable, Swift.Equatable {
  public init(orgId: Swift.String, pageId: Swift.String?, playlistId: Swift.String?, title: Swift.String?, packageName: Swift.String? = Bundle.main.bundleIdentifier)
  public static func == (a: BambuserCommerceSDK.InlineVideoPlaylistInfo, b: BambuserCommerceSDK.InlineVideoPlaylistInfo) -> Swift.Bool
}
public typealias BambuserShoppableVideoPlaylistInfo = BambuserCommerceSDK.InlineVideoPlaylistInfo
public struct InlineSkuInfo : Swift.Sendable, Swift.Equatable {
  public init(orgId: Swift.String, sku: Swift.String)
  public static func == (a: BambuserCommerceSDK.InlineSkuInfo, b: BambuserCommerceSDK.InlineSkuInfo) -> Swift.Bool
}
public typealias BambuserShoppableVideoSkuInfo = BambuserCommerceSDK.InlineSkuInfo
public enum OrganizationServer : Swift.Codable, Swift.CaseIterable, Swift.Sendable {
  case EU
  case US
  public static func == (a: BambuserCommerceSDK.OrganizationServer, b: BambuserCommerceSDK.OrganizationServer) -> Swift.Bool
  public typealias AllCases = [BambuserCommerceSDK.OrganizationServer]
  nonisolated public static var allCases: [BambuserCommerceSDK.OrganizationServer] {
    get
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
extension Foundation.Timer : @unchecked @retroactive Swift.Sendable {
}
@_Concurrency.MainActor public protocol PictureInPictureController {
  @_Concurrency.MainActor var delegate: (any BambuserCommerceSDK.BambuserPictureInPictureDelegate)? { get set }
  @_Concurrency.MainActor var isEnabled: Swift.Bool { get set }
  @_Concurrency.MainActor var isActive: Swift.Bool { get }
  @_Concurrency.MainActor func start()
  @_Concurrency.MainActor func stop()
}
public enum PlayerError : Foundation.LocalizedError {
  case badUrl(Foundation.URL?)
  case noData
  case invalidJson(Swift.String)
  case invalidStatus(Swift.Int, url: Foundation.URL?)
  case unknownError
  case failedToTrack
  case failedToLoadVideo(Swift.String)
  public var errorDescription: Swift.String? {
    get
  }
}
public enum PlayerPipState {
  case willStart
  case willStop
  case started
  case stopped
  case restored
  public static func == (a: BambuserCommerceSDK.PlayerPipState, b: BambuserCommerceSDK.PlayerPipState) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum SafeAreaEdge : Swift.Sendable {
  case all
  case top
  case bottom
  case leading
  case trailing
  public static func == (a: BambuserCommerceSDK.SafeAreaEdge, b: BambuserCommerceSDK.SafeAreaEdge) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct SafeAreaEdges : Swift.Sendable {
  public init(_ edges: BambuserCommerceSDK.SafeAreaEdge...)
}
extension BambuserCommerceSDK.BambuserPlayerError : Swift.Equatable {}
extension BambuserCommerceSDK.BambuserPlayerError : Swift.Hashable {}
extension BambuserCommerceSDK.BambuserVideoPlayer : Swift.Sendable {}
extension BambuserCommerceSDK.BambuserVideoState : Swift.Equatable {}
extension BambuserCommerceSDK.BambuserVideoState : Swift.Hashable {}
extension BambuserCommerceSDK.InlinePlayerMode : Swift.Hashable {}
extension BambuserCommerceSDK.OrganizationServer : Swift.Equatable {}
extension BambuserCommerceSDK.OrganizationServer : Swift.Hashable {}
extension BambuserCommerceSDK.PlayerPipState : Swift.Equatable {}
extension BambuserCommerceSDK.PlayerPipState : Swift.Hashable {}
extension BambuserCommerceSDK.SafeAreaEdge : Swift.Equatable {}
extension BambuserCommerceSDK.SafeAreaEdge : Swift.Hashable {}
